
UART_COMUNICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003340  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003500  08003500  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003500  08003500  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003500  08003500  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000028  08003530  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003530  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9a9  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002437  00000000  00000000  0002f9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00031e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00032bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188a6  00000000  00000000  00033860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f413  00000000  00000000  0004c106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d38c  00000000  00000000  0005b519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e88a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003804  00000000  00000000  000e88f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08003434 	.word	0x08003434

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08003434 	.word	0x08003434

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <command_parser_fsm>:

uint8_t state1 = 0;


void command_parser_fsm()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0





	switch(state1)
 8000162:	4b42      	ldr	r3, [pc, #264]	; (800026c <command_parser_fsm+0x110>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d002      	beq.n	8000170 <command_parser_fsm+0x14>
 800016a:	2b01      	cmp	r3, #1
 800016c:	d03f      	beq.n	80001ee <command_parser_fsm+0x92>
			}


			break;
		}
		default: break;
 800016e:	e07a      	b.n	8000266 <command_parser_fsm+0x10a>
			if(temp == '#')
 8000170:	4b3f      	ldr	r3, [pc, #252]	; (8000270 <command_parser_fsm+0x114>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	2b23      	cmp	r3, #35	; 0x23
 8000176:	d173      	bne.n	8000260 <command_parser_fsm+0x104>
				int i = 4;
 8000178:	2304      	movs	r3, #4
 800017a:	60fb      	str	r3, [r7, #12]
				while(i >= 0)
 800017c:	e027      	b.n	80001ce <command_parser_fsm+0x72>
					index_buffer = (index_buffer==0)?29:index_buffer - 1;
 800017e:	4b3d      	ldr	r3, [pc, #244]	; (8000274 <command_parser_fsm+0x118>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d004      	beq.n	8000190 <command_parser_fsm+0x34>
 8000186:	4b3b      	ldr	r3, [pc, #236]	; (8000274 <command_parser_fsm+0x118>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	3b01      	subs	r3, #1
 800018c:	b2db      	uxtb	r3, r3
 800018e:	e000      	b.n	8000192 <command_parser_fsm+0x36>
 8000190:	231d      	movs	r3, #29
 8000192:	4a38      	ldr	r2, [pc, #224]	; (8000274 <command_parser_fsm+0x118>)
 8000194:	7013      	strb	r3, [r2, #0]
					if(request[i] != buffer[index_buffer])
 8000196:	4a38      	ldr	r2, [pc, #224]	; (8000278 <command_parser_fsm+0x11c>)
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4413      	add	r3, r2
 800019c:	781a      	ldrb	r2, [r3, #0]
 800019e:	4b35      	ldr	r3, [pc, #212]	; (8000274 <command_parser_fsm+0x118>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	4619      	mov	r1, r3
 80001a4:	4b35      	ldr	r3, [pc, #212]	; (800027c <command_parser_fsm+0x120>)
 80001a6:	5c5b      	ldrb	r3, [r3, r1]
 80001a8:	429a      	cmp	r2, r3
 80001aa:	d00d      	beq.n	80001c8 <command_parser_fsm+0x6c>
						char *str1 = "\rInvalid request syntax\r";
 80001ac:	4b34      	ldr	r3, [pc, #208]	; (8000280 <command_parser_fsm+0x124>)
 80001ae:	603b      	str	r3, [r7, #0]
						HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),1000);
 80001b0:	6838      	ldr	r0, [r7, #0]
 80001b2:	f7ff ffcb 	bl	800014c <strlen>
 80001b6:	4603      	mov	r3, r0
 80001b8:	b29a      	uxth	r2, r3
 80001ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001be:	6839      	ldr	r1, [r7, #0]
 80001c0:	4830      	ldr	r0, [pc, #192]	; (8000284 <command_parser_fsm+0x128>)
 80001c2:	f002 fbc4 	bl	800294e <HAL_UART_Transmit>
						return;
 80001c6:	e04e      	b.n	8000266 <command_parser_fsm+0x10a>
					i--;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	3b01      	subs	r3, #1
 80001cc:	60fb      	str	r3, [r7, #12]
				while(i >= 0)
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	dad4      	bge.n	800017e <command_parser_fsm+0x22>
				send_signal = 1;
 80001d4:	4b2c      	ldr	r3, [pc, #176]	; (8000288 <command_parser_fsm+0x12c>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	701a      	strb	r2, [r3, #0]
				adc_val = HAL_ADC_GetValue(&hadc1);
 80001da:	482c      	ldr	r0, [pc, #176]	; (800028c <command_parser_fsm+0x130>)
 80001dc:	f000 fe20 	bl	8000e20 <HAL_ADC_GetValue>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a2b      	ldr	r2, [pc, #172]	; (8000290 <command_parser_fsm+0x134>)
 80001e4:	6013      	str	r3, [r2, #0]
				state1 = 1;
 80001e6:	4b21      	ldr	r3, [pc, #132]	; (800026c <command_parser_fsm+0x110>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	701a      	strb	r2, [r3, #0]
			break;
 80001ec:	e038      	b.n	8000260 <command_parser_fsm+0x104>
			if(temp == '#')
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <command_parser_fsm+0x114>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b23      	cmp	r3, #35	; 0x23
 80001f4:	d136      	bne.n	8000264 <command_parser_fsm+0x108>
				int i = 3;
 80001f6:	2303      	movs	r3, #3
 80001f8:	60bb      	str	r3, [r7, #8]
				while(i >= 0)
 80001fa:	e027      	b.n	800024c <command_parser_fsm+0xf0>
					index_buffer = (index_buffer == 0)?29:index_buffer - 1;
 80001fc:	4b1d      	ldr	r3, [pc, #116]	; (8000274 <command_parser_fsm+0x118>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d004      	beq.n	800020e <command_parser_fsm+0xb2>
 8000204:	4b1b      	ldr	r3, [pc, #108]	; (8000274 <command_parser_fsm+0x118>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	3b01      	subs	r3, #1
 800020a:	b2db      	uxtb	r3, r3
 800020c:	e000      	b.n	8000210 <command_parser_fsm+0xb4>
 800020e:	231d      	movs	r3, #29
 8000210:	4a18      	ldr	r2, [pc, #96]	; (8000274 <command_parser_fsm+0x118>)
 8000212:	7013      	strb	r3, [r2, #0]
					if(buffer[index_buffer] != ack[i])
 8000214:	4b17      	ldr	r3, [pc, #92]	; (8000274 <command_parser_fsm+0x118>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	4b18      	ldr	r3, [pc, #96]	; (800027c <command_parser_fsm+0x120>)
 800021c:	5c9a      	ldrb	r2, [r3, r2]
 800021e:	491d      	ldr	r1, [pc, #116]	; (8000294 <command_parser_fsm+0x138>)
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	440b      	add	r3, r1
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	429a      	cmp	r2, r3
 8000228:	d00d      	beq.n	8000246 <command_parser_fsm+0xea>
						char *str1 = "\rInvalid ack syntax\r";
 800022a:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <command_parser_fsm+0x13c>)
 800022c:	607b      	str	r3, [r7, #4]
						HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),1000);
 800022e:	6878      	ldr	r0, [r7, #4]
 8000230:	f7ff ff8c 	bl	800014c <strlen>
 8000234:	4603      	mov	r3, r0
 8000236:	b29a      	uxth	r2, r3
 8000238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	4811      	ldr	r0, [pc, #68]	; (8000284 <command_parser_fsm+0x128>)
 8000240:	f002 fb85 	bl	800294e <HAL_UART_Transmit>
						return;
 8000244:	e00f      	b.n	8000266 <command_parser_fsm+0x10a>
					i--;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	3b01      	subs	r3, #1
 800024a:	60bb      	str	r3, [r7, #8]
				while(i >= 0)
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	2b00      	cmp	r3, #0
 8000250:	dad4      	bge.n	80001fc <command_parser_fsm+0xa0>
				receive_signal = 1;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <command_parser_fsm+0x140>)
 8000254:	2201      	movs	r2, #1
 8000256:	701a      	strb	r2, [r3, #0]
				state1 = 0;
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <command_parser_fsm+0x110>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
			break;
 800025e:	e001      	b.n	8000264 <command_parser_fsm+0x108>
			break;
 8000260:	bf00      	nop
 8000262:	e000      	b.n	8000266 <command_parser_fsm+0x10a>
			break;
 8000264:	bf00      	nop





}
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000048 	.word	0x20000048
 8000270:	2000000c 	.word	0x2000000c
 8000274:	20000044 	.word	0x20000044
 8000278:	20000000 	.word	0x20000000
 800027c:	200000d0 	.word	0x200000d0
 8000280:	0800344c 	.word	0x0800344c
 8000284:	2000008c 	.word	0x2000008c
 8000288:	20000046 	.word	0x20000046
 800028c:	2000005c 	.word	0x2000005c
 8000290:	20000054 	.word	0x20000054
 8000294:	20000008 	.word	0x20000008
 8000298:	08003468 	.word	0x08003468
 800029c:	20000047 	.word	0x20000047

080002a0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80002b0:	d101      	bne.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{

		timer_run();
 80002b2:	f000 fb81 	bl	80009b8 <timer_run>

	}
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <HAL_UART_RxCpltCallback>:


int count=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <HAL_UART_RxCpltCallback+0x50>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d119      	bne.n	8000306 <HAL_UART_RxCpltCallback+0x46>
	{

		buffer[index_buffer++] = temp;
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <HAL_UART_RxCpltCallback+0x54>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	b2d1      	uxtb	r1, r2
 80002da:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <HAL_UART_RxCpltCallback+0x54>)
 80002dc:	7011      	strb	r1, [r2, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <HAL_UART_RxCpltCallback+0x58>)
 80002e2:	7819      	ldrb	r1, [r3, #0]
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <HAL_UART_RxCpltCallback+0x5c>)
 80002e6:	5499      	strb	r1, [r3, r2]



		if(index_buffer == 30)index_buffer = 0;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <HAL_UART_RxCpltCallback+0x54>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b1e      	cmp	r3, #30
 80002ee:	d102      	bne.n	80002f6 <HAL_UART_RxCpltCallback+0x36>
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <HAL_UART_RxCpltCallback+0x54>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	701a      	strb	r2, [r3, #0]

		buffer_flag = 1;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <HAL_UART_RxCpltCallback+0x60>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1,&temp,1,1000);

		HAL_UART_Receive_IT(&huart2,&temp, 1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	4906      	ldr	r1, [pc, #24]	; (8000318 <HAL_UART_RxCpltCallback+0x58>)
 8000300:	4808      	ldr	r0, [pc, #32]	; (8000324 <HAL_UART_RxCpltCallback+0x64>)
 8000302:	f002 fbb6 	bl	8002a72 <HAL_UART_Receive_IT>

		//HAL_UART_Transmit(&huart1,&temp,1,1000);

	}
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40004400 	.word	0x40004400
 8000314:	20000044 	.word	0x20000044
 8000318:	2000000c 	.word	0x2000000c
 800031c:	200000d0 	.word	0x200000d0
 8000320:	20000045 	.word	0x20000045
 8000324:	200000f0 	.word	0x200000f0

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032c:	f000 fc1a 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000330:	f000 f844 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000334:	f000 f970 	bl	8000618 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000338:	f000 f890 	bl	800045c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800033c:	f000 f942 	bl	80005c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000340:	f000 f8ca 	bl	80004d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000344:	f000 f914 	bl	8000570 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */




  ADC1->CR2 |= ADC_CR2_ADON | ADC_CR2_CONT;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <main+0x80>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <main+0x80>)
 800034e:	f043 0303 	orr.w	r3, r3, #3
 8000352:	6093      	str	r3, [r2, #8]

  HAL_Delay(1);
 8000354:	2001      	movs	r0, #1
 8000356:	f000 fc67 	bl	8000c28 <HAL_Delay>

  ADC1->CR2 |= ADC_CR2_ADON;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <main+0x80>)
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <main+0x80>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6093      	str	r3, [r2, #8]

  HAL_Delay(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 fc5e 	bl	8000c28 <HAL_Delay>

  ADC1->CR2 |= ADC_CR2_CAL;
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <main+0x80>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <main+0x80>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6093      	str	r3, [r2, #8]

  HAL_Delay(1);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 fc55 	bl	8000c28 <HAL_Delay>


  //uint8_t sth;


HAL_TIM_Base_Start_IT(&htim2);
 800037e:	480b      	ldr	r0, [pc, #44]	; (80003ac <main+0x84>)
 8000380:	f001 ff04 	bl	800218c <HAL_TIM_Base_Start_IT>

HAL_UART_Receive_IT(&huart2,&temp, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	490a      	ldr	r1, [pc, #40]	; (80003b0 <main+0x88>)
 8000388:	480a      	ldr	r0, [pc, #40]	; (80003b4 <main+0x8c>)
 800038a:	f002 fb72 	bl	8002a72 <HAL_UART_Receive_IT>


  while (1)
  {

	  if(buffer_flag)
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <main+0x90>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d004      	beq.n	80003a0 <main+0x78>
	 	  {
	 		  command_parser_fsm();
 8000396:	f7ff fee1 	bl	800015c <command_parser_fsm>

	 		  buffer_flag = 0;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <main+0x90>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
	 	  }

	 	  uart_communication_fsm();
 80003a0:	f000 fb30 	bl	8000a04 <uart_communication_fsm>
	  if(buffer_flag)
 80003a4:	e7f3      	b.n	800038e <main+0x66>
 80003a6:	bf00      	nop
 80003a8:	40012400 	.word	0x40012400
 80003ac:	20000134 	.word	0x20000134
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	200000f0 	.word	0x200000f0
 80003b8:	20000045 	.word	0x20000045

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b094      	sub	sp, #80	; 0x50
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c6:	2228      	movs	r2, #40	; 0x28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 ffe8 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ec:	2302      	movs	r3, #2
 80003ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f4:	2310      	movs	r3, #16
 80003f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000400:	4618      	mov	r0, r3
 8000402:	f001 f9a3 	bl	800174c <HAL_RCC_OscConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800040c:	f000 f936 	bl	800067c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000410:	230f      	movs	r3, #15
 8000412:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fc0e 	bl	8001c4c <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000436:	f000 f921 	bl	800067c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800043a:	2302      	movs	r3, #2
 800043c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4618      	mov	r0, r3
 8000446:	f001 fd9b 	bl	8001f80 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000450:	f000 f914 	bl	800067c <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3750      	adds	r7, #80	; 0x50
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_ADC1_Init+0x74>)
 800046e:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <MX_ADC1_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_ADC1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_ADC1_Init+0x74>)
 800047a:	2201      	movs	r2, #1
 800047c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_ADC1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_ADC1_Init+0x74>)
 8000486:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800048a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_ADC1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_ADC1_Init+0x74>)
 8000494:	2201      	movs	r2, #1
 8000496:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <MX_ADC1_Init+0x74>)
 800049a:	f000 fbe9 	bl	8000c70 <HAL_ADC_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004a4:	f000 f8ea 	bl	800067c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	2301      	movs	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_ADC1_Init+0x74>)
 80004ba:	f000 fcbd 	bl	8000e38 <HAL_ADC_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004c4:	f000 f8da 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000005c 	.word	0x2000005c
 80004d4:	40012400 	.word	0x40012400

080004d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_TIM2_Init+0x94>)
 80004f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_TIM2_Init+0x94>)
 80004fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <MX_TIM2_Init+0x94>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_TIM2_Init+0x94>)
 800050c:	2209      	movs	r2, #9
 800050e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_TIM2_Init+0x94>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_TIM2_Init+0x94>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800051c:	4813      	ldr	r0, [pc, #76]	; (800056c <MX_TIM2_Init+0x94>)
 800051e:	f001 fde5 	bl	80020ec <HAL_TIM_Base_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000528:	f000 f8a8 	bl	800067c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	4619      	mov	r1, r3
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <MX_TIM2_Init+0x94>)
 800053a:	f001 ff7b 	bl	8002434 <HAL_TIM_ConfigClockSource>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000544:	f000 f89a 	bl	800067c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000548:	2300      	movs	r3, #0
 800054a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_TIM2_Init+0x94>)
 8000556:	f002 f943 	bl	80027e0 <HAL_TIMEx_MasterConfigSynchronization>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000560:	f000 f88c 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000134 	.word	0x20000134

08000570 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <MX_USART1_UART_Init+0x50>)
 8000578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800057c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000596:	2208      	movs	r2, #8
 8000598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 80005a8:	f002 f984 	bl	80028b4 <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005b2:	f000 f863 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	40013800 	.word	0x40013800

080005c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005fc:	f002 f95a 	bl	80028b4 <HAL_UART_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000606:	f000 f839 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000f0 	.word	0x200000f0
 8000614:	40004400 	.word	0x40004400

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_GPIO_Init+0x5c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a10      	ldr	r2, [pc, #64]	; (8000674 <MX_GPIO_Init+0x5c>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_GPIO_Init+0x5c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0x60>)
 800064a:	f001 f867 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800064e:	2320      	movs	r3, #32
 8000650:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0x60>)
 8000666:	f000 fedf 	bl	8001428 <HAL_GPIO_Init>

}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_MspInit+0x5c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <HAL_MspInit+0x5c>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_MspInit+0x5c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x5c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_MspInit+0x5c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x5c>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_MspInit+0x60>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_MspInit+0x60>)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010000 	.word	0x40010000

080006ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <HAL_ADC_MspInit+0x6c>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d121      	bne.n	8000750 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <HAL_ADC_MspInit+0x70>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <HAL_ADC_MspInit+0x70>)
 8000712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_ADC_MspInit+0x70>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_ADC_MspInit+0x70>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <HAL_ADC_MspInit+0x70>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_ADC_MspInit+0x70>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000740:	2303      	movs	r3, #3
 8000742:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <HAL_ADC_MspInit+0x74>)
 800074c:	f000 fe6c 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40012400 	.word	0x40012400
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800

08000764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000774:	d113      	bne.n	800079e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	201c      	movs	r0, #28
 8000794:	f000 fd61 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000798:	201c      	movs	r0, #28
 800079a:	f000 fd7a 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a3b      	ldr	r2, [pc, #236]	; (80008b4 <HAL_UART_MspInit+0x108>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d132      	bne.n	8000832 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a39      	ldr	r2, [pc, #228]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	4619      	mov	r1, r3
 8000810:	482a      	ldr	r0, [pc, #168]	; (80008bc <HAL_UART_MspInit+0x110>)
 8000812:	f000 fe09 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4619      	mov	r1, r3
 800082a:	4824      	ldr	r0, [pc, #144]	; (80008bc <HAL_UART_MspInit+0x110>)
 800082c:	f000 fdfc 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000830:	e03c      	b.n	80008ac <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <HAL_UART_MspInit+0x114>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d137      	bne.n	80008ac <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 8000842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000846:	61d3      	str	r3, [r2, #28]
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_UART_MspInit+0x10c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800086c:	2304      	movs	r3, #4
 800086e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	4619      	mov	r1, r3
 800087e:	480f      	ldr	r0, [pc, #60]	; (80008bc <HAL_UART_MspInit+0x110>)
 8000880:	f000 fdd2 	bl	8001428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000884:	2308      	movs	r3, #8
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4619      	mov	r1, r3
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <HAL_UART_MspInit+0x110>)
 8000898:	f000 fdc6 	bl	8001428 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2026      	movs	r0, #38	; 0x26
 80008a2:	f000 fcda 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008a6:	2026      	movs	r0, #38	; 0x26
 80008a8:	f000 fcf3 	bl	8001292 <HAL_NVIC_EnableIRQ>
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40013800 	.word	0x40013800
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800
 80008c0:	40004400 	.word	0x40004400

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090a:	f000 f971 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM2_IRQHandler+0x10>)
 800091a:	f001 fc83 	bl	8002224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000134 	.word	0x20000134

08000928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USART2_IRQHandler+0x10>)
 800092e:	f002 f8d1 	bl	8002ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000f0 	.word	0x200000f0

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <disable_timer>:




void disable_timer()
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	en = 0;
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <disable_timer+0x18>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]

	timer_flag = 0;
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <disable_timer+0x1c>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000050 	.word	0x20000050
 8000964:	2000004c 	.word	0x2000004c

08000968 <set_Timer>:




void set_Timer(int count_down)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if(!en) en = 1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <set_Timer+0x3c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <set_Timer+0x16>
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <set_Timer+0x3c>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]

	timer_bound = count_down/timer_cycle;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <set_Timer+0x40>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	fb92 f3f3 	sdiv	r3, r2, r3
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <set_Timer+0x44>)
 800098a:	6013      	str	r3, [r2, #0]

	timer_counter = timer_bound;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <set_Timer+0x44>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <set_Timer+0x48>)
 8000992:	6013      	str	r3, [r2, #0]

	timer_flag = 0;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <set_Timer+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000050 	.word	0x20000050
 80009a8:	2000001c 	.word	0x2000001c
 80009ac:	20000018 	.word	0x20000018
 80009b0:	20000014 	.word	0x20000014
 80009b4:	2000004c 	.word	0x2000004c

080009b8 <timer_run>:



void timer_run()
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

	if(en)
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <timer_run+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d014      	beq.n	80009ee <timer_run+0x36>
	{
		timer_counter=(timer_counter==0)?0:timer_counter-1;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <timer_run+0x44>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <timer_run+0x1c>
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <timer_run+0x44>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	e000      	b.n	80009d6 <timer_run+0x1e>
 80009d4:	2300      	movs	r3, #0
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <timer_run+0x44>)
 80009d8:	6013      	str	r3, [r2, #0]

		timer_flag=(timer_counter==0)?1:0;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <timer_run+0x44>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bf0c      	ite	eq
 80009e2:	2301      	moveq	r3, #1
 80009e4:	2300      	movne	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <timer_run+0x48>)
 80009ec:	601a      	str	r2, [r3, #0]
	}

}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000050 	.word	0x20000050
 80009fc:	20000014 	.word	0x20000014
 8000a00:	2000004c 	.word	0x2000004c

08000a04 <uart_communication_fsm>:
uint32_t adc_val = 0;

uint8_t state2 = 0;

void uart_communication_fsm()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

	switch(state2)
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <uart_communication_fsm+0xe8>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <uart_communication_fsm+0x14>
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d008      	beq.n	8000a28 <uart_communication_fsm+0x24>



	}

	default: break;
 8000a16:	e063      	b.n	8000ae0 <uart_communication_fsm+0xdc>
	 if(send_signal)
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <uart_communication_fsm+0xec>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d05d      	beq.n	8000adc <uart_communication_fsm+0xd8>
			state2 = 1;
 8000a20:	4b32      	ldr	r3, [pc, #200]	; (8000aec <uart_communication_fsm+0xe8>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
		break;
 8000a26:	e059      	b.n	8000adc <uart_communication_fsm+0xd8>
		if(receive_signal)
 8000a28:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <uart_communication_fsm+0xf0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d018      	beq.n	8000a62 <uart_communication_fsm+0x5e>
			char * str = "\rTransmission completes\r";
 8000a30:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <uart_communication_fsm+0xf4>)
 8000a32:	603b      	str	r3, [r7, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),1000);
 8000a34:	6838      	ldr	r0, [r7, #0]
 8000a36:	f7ff fb89 	bl	800014c <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	6839      	ldr	r1, [r7, #0]
 8000a44:	482d      	ldr	r0, [pc, #180]	; (8000afc <uart_communication_fsm+0xf8>)
 8000a46:	f001 ff82 	bl	800294e <HAL_UART_Transmit>
			send_signal = 0;
 8000a4a:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <uart_communication_fsm+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
			receive_signal = 0;
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <uart_communication_fsm+0xf0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
			disable_timer();
 8000a56:	f7ff ff77 	bl	8000948 <disable_timer>
			state2 = 0;
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <uart_communication_fsm+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
			break;
 8000a60:	e03f      	b.n	8000ae2 <uart_communication_fsm+0xde>
		if(send_signal)
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <uart_communication_fsm+0xec>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d030      	beq.n	8000acc <uart_communication_fsm+0xc8>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\r!ADC=",6,1000);
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	2206      	movs	r2, #6
 8000a70:	4923      	ldr	r1, [pc, #140]	; (8000b00 <uart_communication_fsm+0xfc>)
 8000a72:	4822      	ldr	r0, [pc, #136]	; (8000afc <uart_communication_fsm+0xf8>)
 8000a74:	f001 ff6b 	bl	800294e <HAL_UART_Transmit>
				char *str = "0";
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <uart_communication_fsm+0x100>)
 8000a7a:	607b      	str	r3, [r7, #4]
				HAL_UART_Transmit(&huart1,(uint8_t*)str, strlen(itoa(adc_val,str,10)),1000);
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <uart_communication_fsm+0x104>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	220a      	movs	r2, #10
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fc89 	bl	800339c <itoa>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fb5d 	bl	800014c <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	4817      	ldr	r0, [pc, #92]	; (8000afc <uart_communication_fsm+0xf8>)
 8000a9e:	f001 ff56 	bl	800294e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)" ",1,1000);
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4918      	ldr	r1, [pc, #96]	; (8000b0c <uart_communication_fsm+0x108>)
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <uart_communication_fsm+0xf8>)
 8000aac:	f001 ff4f 	bl	800294e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)"#\r",2,1000);
 8000ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	4916      	ldr	r1, [pc, #88]	; (8000b10 <uart_communication_fsm+0x10c>)
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <uart_communication_fsm+0xf8>)
 8000aba:	f001 ff48 	bl	800294e <HAL_UART_Transmit>
			send_signal = 0;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <uart_communication_fsm+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			set_Timer(900);
 8000ac4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000ac8:	f7ff ff4e 	bl	8000968 <set_Timer>
		if(timer_flag)
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <uart_communication_fsm+0x110>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d005      	beq.n	8000ae0 <uart_communication_fsm+0xdc>
			send_signal = 1;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <uart_communication_fsm+0xec>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
	default: break;
 8000ada:	e001      	b.n	8000ae0 <uart_communication_fsm+0xdc>
		break;
 8000adc:	bf00      	nop
 8000ade:	e000      	b.n	8000ae2 <uart_communication_fsm+0xde>
	default: break;
 8000ae0:	bf00      	nop

	}

}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000058 	.word	0x20000058
 8000af0:	20000046 	.word	0x20000046
 8000af4:	20000047 	.word	0x20000047
 8000af8:	08003480 	.word	0x08003480
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	0800349c 	.word	0x0800349c
 8000b04:	080034a4 	.word	0x080034a4
 8000b08:	20000054 	.word	0x20000054
 8000b0c:	080034a8 	.word	0x080034a8
 8000b10:	080034ac 	.word	0x080034ac
 8000b14:	2000004c 	.word	0x2000004c

08000b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b3e:	f7ff fefd 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f002 fbef 	bl	8003324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff fbef 	bl	8000328 <main>
  bx lr
 8000b4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000b54:	08003508 	.word	0x08003508
  ldr r2, =_sbss
 8000b58:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000b5c:	20000180 	.word	0x20000180

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 fb65 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fd82 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fb7d 	bl	80012ae <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 fb45 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000010 	.word	0x20000010
 8000be8:	20000024 	.word	0x20000024
 8000bec:	20000020 	.word	0x20000020

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <HAL_IncTick+0x20>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000024 	.word	0x20000024
 8000c10:	2000017c 	.word	0x2000017c

08000c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	2000017c 	.word	0x2000017c

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffe0 	bl	8000c14 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000024 	.word	0x20000024

08000c70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e0be      	b.n	8000e10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d109      	bne.n	8000cb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fd1c 	bl	80006ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f9b7 	bl	8001028 <ADC_ConversionStop_Disable>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8099 	bne.w	8000dfe <HAL_ADC_Init+0x18e>
 8000ccc:	7dfb      	ldrb	r3, [r7, #23]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 8095 	bne.w	8000dfe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cdc:	f023 0302 	bic.w	r3, r3, #2
 8000ce0:	f043 0202 	orr.w	r2, r3, #2
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cf0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7b1b      	ldrb	r3, [r3, #12]
 8000cf6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cf8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d08:	d003      	beq.n	8000d12 <HAL_ADC_Init+0xa2>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d102      	bne.n	8000d18 <HAL_ADC_Init+0xa8>
 8000d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d16:	e000      	b.n	8000d1a <HAL_ADC_Init+0xaa>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7d1b      	ldrb	r3, [r3, #20]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d119      	bne.n	8000d5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7b1b      	ldrb	r3, [r3, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d109      	bne.n	8000d44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	035a      	lsls	r2, r3, #13
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	e00b      	b.n	8000d5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	f043 0220 	orr.w	r2, r3, #32
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	f043 0201 	orr.w	r2, r3, #1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <HAL_ADC_Init+0x1a8>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d8c:	d003      	beq.n	8000d96 <HAL_ADC_Init+0x126>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d104      	bne.n	8000da0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	051b      	lsls	r3, r3, #20
 8000d9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_ADC_Init+0x1ac>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d10b      	bne.n	8000ddc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	f023 0303 	bic.w	r3, r3, #3
 8000dd2:	f043 0201 	orr.w	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dda:	e018      	b.n	8000e0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	f023 0312 	bic.w	r3, r3, #18
 8000de4:	f043 0210 	orr.w	r2, r3, #16
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	f043 0201 	orr.w	r2, r3, #1
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dfc:	e007      	b.n	8000e0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e02:	f043 0210 	orr.w	r2, r3, #16
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	ffe1f7fd 	.word	0xffe1f7fd
 8000e1c:	ff1f0efe 	.word	0xff1f0efe

08000e20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x20>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e0dc      	b.n	8001012 <HAL_ADC_ConfigChannel+0x1da>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	d81c      	bhi.n	8000ea2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	3b05      	subs	r3, #5
 8000e7a:	221f      	movs	r2, #31
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4019      	ands	r1, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	3b05      	subs	r3, #5
 8000e94:	fa00 f203 	lsl.w	r2, r0, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea0:	e03c      	b.n	8000f1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b0c      	cmp	r3, #12
 8000ea8:	d81c      	bhi.n	8000ee4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	3b23      	subs	r3, #35	; 0x23
 8000ebc:	221f      	movs	r2, #31
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	4019      	ands	r1, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3b23      	subs	r3, #35	; 0x23
 8000ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee2:	e01b      	b.n	8000f1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b41      	subs	r3, #65	; 0x41
 8000ef6:	221f      	movs	r2, #31
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4019      	ands	r1, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3b41      	subs	r3, #65	; 0x41
 8000f10:	fa00 f203 	lsl.w	r2, r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b09      	cmp	r3, #9
 8000f22:	d91c      	bls.n	8000f5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68d9      	ldr	r1, [r3, #12]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	3b1e      	subs	r3, #30
 8000f36:	2207      	movs	r2, #7
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6898      	ldr	r0, [r3, #8]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b1e      	subs	r3, #30
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	e019      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6919      	ldr	r1, [r3, #16]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	2207      	movs	r2, #7
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4019      	ands	r1, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	6898      	ldr	r0, [r3, #8]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	fa00 f203 	lsl.w	r2, r0, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d003      	beq.n	8000fa2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f9e:	2b11      	cmp	r3, #17
 8000fa0:	d132      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	; (800101c <HAL_ADC_ConfigChannel+0x1e4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d125      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d126      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fc8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	d11a      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	0c9a      	lsrs	r2, r3, #18
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe8:	e002      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f9      	bne.n	8000fea <HAL_ADC_ConfigChannel+0x1b2>
 8000ff6:	e007      	b.n	8001008 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	f043 0220 	orr.w	r2, r3, #32
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40012400 	.word	0x40012400
 8001020:	20000010 	.word	0x20000010
 8001024:	431bde83 	.word	0x431bde83

08001028 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b01      	cmp	r3, #1
 8001040:	d12e      	bne.n	80010a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001052:	f7ff fddf 	bl	8000c14 <HAL_GetTick>
 8001056:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001058:	e01b      	b.n	8001092 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800105a:	f7ff fddb 	bl	8000c14 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d914      	bls.n	8001092 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b01      	cmp	r3, #1
 8001074:	d10d      	bne.n	8001092 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	f043 0210 	orr.w	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e007      	b.n	80010a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b01      	cmp	r3, #1
 800109e:	d0dc      	beq.n	800105a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4906      	ldr	r1, [pc, #24]	; (8001144 <__NVIC_EnableIRQ+0x34>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff90 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff2d 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff42 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff35 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d008      	beq.n	80012ee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2204      	movs	r2, #4
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e020      	b.n	8001330 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 020e 	bic.w	r2, r2, #14
 80012fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001316:	2101      	movs	r1, #1
 8001318:	fa01 f202 	lsl.w	r2, r1, r2
 800131c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800134e:	2b02      	cmp	r3, #2
 8001350:	d005      	beq.n	800135e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2204      	movs	r2, #4
 8001356:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e051      	b.n	8001402 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 020e 	bic.w	r2, r2, #14
 800136c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a22      	ldr	r2, [pc, #136]	; (800140c <HAL_DMA_Abort_IT+0xd0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d029      	beq.n	80013dc <HAL_DMA_Abort_IT+0xa0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_DMA_Abort_IT+0xd4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d022      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x9c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_DMA_Abort_IT+0xd8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d01a      	beq.n	80013d2 <HAL_DMA_Abort_IT+0x96>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_DMA_Abort_IT+0xdc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d012      	beq.n	80013cc <HAL_DMA_Abort_IT+0x90>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_DMA_Abort_IT+0xe0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00a      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x8a>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_DMA_Abort_IT+0xe4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d102      	bne.n	80013c0 <HAL_DMA_Abort_IT+0x84>
 80013ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013be:	e00e      	b.n	80013de <HAL_DMA_Abort_IT+0xa2>
 80013c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c4:	e00b      	b.n	80013de <HAL_DMA_Abort_IT+0xa2>
 80013c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ca:	e008      	b.n	80013de <HAL_DMA_Abort_IT+0xa2>
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d0:	e005      	b.n	80013de <HAL_DMA_Abort_IT+0xa2>
 80013d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d6:	e002      	b.n	80013de <HAL_DMA_Abort_IT+0xa2>
 80013d8:	2310      	movs	r3, #16
 80013da:	e000      	b.n	80013de <HAL_DMA_Abort_IT+0xa2>
 80013dc:	2301      	movs	r3, #1
 80013de:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_DMA_Abort_IT+0xe8>)
 80013e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
    } 
  }
  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40020008 	.word	0x40020008
 8001410:	4002001c 	.word	0x4002001c
 8001414:	40020030 	.word	0x40020030
 8001418:	40020044 	.word	0x40020044
 800141c:	40020058 	.word	0x40020058
 8001420:	4002006c 	.word	0x4002006c
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e148      	b.n	80016ce <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800143c:	2201      	movs	r2, #1
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 8137 	bne.w	80016c8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4aa3      	ldr	r2, [pc, #652]	; (80016ec <HAL_GPIO_Init+0x2c4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d05e      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001464:	4aa1      	ldr	r2, [pc, #644]	; (80016ec <HAL_GPIO_Init+0x2c4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d875      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800146a:	4aa1      	ldr	r2, [pc, #644]	; (80016f0 <HAL_GPIO_Init+0x2c8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d058      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001470:	4a9f      	ldr	r2, [pc, #636]	; (80016f0 <HAL_GPIO_Init+0x2c8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d86f      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 8001476:	4a9f      	ldr	r2, [pc, #636]	; (80016f4 <HAL_GPIO_Init+0x2cc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d052      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 800147c:	4a9d      	ldr	r2, [pc, #628]	; (80016f4 <HAL_GPIO_Init+0x2cc>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d869      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 8001482:	4a9d      	ldr	r2, [pc, #628]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d04c      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001488:	4a9b      	ldr	r2, [pc, #620]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d863      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800148e:	4a9b      	ldr	r2, [pc, #620]	; (80016fc <HAL_GPIO_Init+0x2d4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d046      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001494:	4a99      	ldr	r2, [pc, #612]	; (80016fc <HAL_GPIO_Init+0x2d4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d85d      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800149a:	2b12      	cmp	r3, #18
 800149c:	d82a      	bhi.n	80014f4 <HAL_GPIO_Init+0xcc>
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d859      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <HAL_GPIO_Init+0x80>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	08001523 	.word	0x08001523
 80014ac:	080014fd 	.word	0x080014fd
 80014b0:	0800150f 	.word	0x0800150f
 80014b4:	08001551 	.word	0x08001551
 80014b8:	08001557 	.word	0x08001557
 80014bc:	08001557 	.word	0x08001557
 80014c0:	08001557 	.word	0x08001557
 80014c4:	08001557 	.word	0x08001557
 80014c8:	08001557 	.word	0x08001557
 80014cc:	08001557 	.word	0x08001557
 80014d0:	08001557 	.word	0x08001557
 80014d4:	08001557 	.word	0x08001557
 80014d8:	08001557 	.word	0x08001557
 80014dc:	08001557 	.word	0x08001557
 80014e0:	08001557 	.word	0x08001557
 80014e4:	08001557 	.word	0x08001557
 80014e8:	08001557 	.word	0x08001557
 80014ec:	08001505 	.word	0x08001505
 80014f0:	08001519 	.word	0x08001519
 80014f4:	4a82      	ldr	r2, [pc, #520]	; (8001700 <HAL_GPIO_Init+0x2d8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014fa:	e02c      	b.n	8001556 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e029      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	3304      	adds	r3, #4
 800150a:	623b      	str	r3, [r7, #32]
          break;
 800150c:	e024      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3308      	adds	r3, #8
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e01f      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	330c      	adds	r3, #12
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e01a      	b.n	8001558 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800152a:	2304      	movs	r3, #4
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e013      	b.n	8001558 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001538:	2308      	movs	r3, #8
 800153a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	611a      	str	r2, [r3, #16]
          break;
 8001542:	e009      	b.n	8001558 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	615a      	str	r2, [r3, #20]
          break;
 800154e:	e003      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x130>
          break;
 8001556:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d801      	bhi.n	8001562 <HAL_GPIO_Init+0x13a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_Init+0x13e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3304      	adds	r3, #4
 8001566:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d802      	bhi.n	8001574 <HAL_GPIO_Init+0x14c>
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x152>
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	3b08      	subs	r3, #8
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	210f      	movs	r1, #15
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	401a      	ands	r2, r3
 800158c:	6a39      	ldr	r1, [r7, #32]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8090 	beq.w	80016c8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a8:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_GPIO_Init+0x2dc>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a55      	ldr	r2, [pc, #340]	; (8001704 <HAL_GPIO_Init+0x2dc>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HAL_GPIO_Init+0x2dc>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c0:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a49      	ldr	r2, [pc, #292]	; (800170c <HAL_GPIO_Init+0x2e4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00d      	beq.n	8001608 <HAL_GPIO_Init+0x1e0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a48      	ldr	r2, [pc, #288]	; (8001710 <HAL_GPIO_Init+0x2e8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x1dc>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a47      	ldr	r2, [pc, #284]	; (8001714 <HAL_GPIO_Init+0x2ec>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_GPIO_Init+0x1d8>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e004      	b.n	800160a <HAL_GPIO_Init+0x1e2>
 8001600:	2303      	movs	r3, #3
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x1e2>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_GPIO_Init+0x1e2>
 8001608:	2300      	movs	r3, #0
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	f002 0203 	and.w	r2, r2, #3
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	4093      	lsls	r3, r2
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800161a:	493b      	ldr	r1, [pc, #236]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4937      	ldr	r1, [pc, #220]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	43db      	mvns	r3, r3
 800164a:	4933      	ldr	r1, [pc, #204]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 800164c:	4013      	ands	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	492d      	ldr	r1, [pc, #180]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	43db      	mvns	r3, r3
 8001672:	4929      	ldr	r1, [pc, #164]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 8001674:	4013      	ands	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	4923      	ldr	r1, [pc, #140]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	491f      	ldr	r1, [pc, #124]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 800169c:	4013      	ands	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	4919      	ldr	r1, [pc, #100]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4915      	ldr	r1, [pc, #84]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	3301      	adds	r3, #1
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f47f aeaf 	bne.w	800143c <HAL_GPIO_Init+0x14>
  }
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	372c      	adds	r7, #44	; 0x2c
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	10320000 	.word	0x10320000
 80016f0:	10310000 	.word	0x10310000
 80016f4:	10220000 	.word	0x10220000
 80016f8:	10210000 	.word	0x10210000
 80016fc:	10120000 	.word	0x10120000
 8001700:	10110000 	.word	0x10110000
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000
 800170c:	40010800 	.word	0x40010800
 8001710:	40010c00 	.word	0x40010c00
 8001714:	40011000 	.word	0x40011000
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001738:	e003      	b.n	8001742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	611a      	str	r2, [r3, #16]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e26c      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8087 	beq.w	800187a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800176c:	4b92      	ldr	r3, [pc, #584]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b04      	cmp	r3, #4
 8001776:	d00c      	beq.n	8001792 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001778:	4b8f      	ldr	r3, [pc, #572]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d112      	bne.n	80017aa <HAL_RCC_OscConfig+0x5e>
 8001784:	4b8c      	ldr	r3, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d10b      	bne.n	80017aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d06c      	beq.n	8001878 <HAL_RCC_OscConfig+0x12c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d168      	bne.n	8001878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e246      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x76>
 80017b4:	4b80      	ldr	r3, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a7f      	ldr	r2, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e02e      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7a      	ldr	r2, [pc, #488]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0xbc>
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a71      	ldr	r2, [pc, #452]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6f      	ldr	r3, [pc, #444]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6e      	ldr	r2, [pc, #440]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6a      	ldr	r2, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a67      	ldr	r2, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff f9f4 	bl	8000c14 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff f9f0 	bl	8000c14 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1fa      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xe4>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff f9e0 	bl	8000c14 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f9dc 	bl	8000c14 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1e6      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x10c>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d063      	beq.n	800194e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001886:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001892:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b08      	cmp	r3, #8
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x18c>
 800189e:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1ba      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4939      	ldr	r1, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e03a      	b.n	800194e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff f995 	bl	8000c14 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff f991 	bl	8000c14 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e19b      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4927      	ldr	r1, [pc, #156]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff f974 	bl	8000c14 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff f970 	bl	8000c14 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e17a      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d03a      	beq.n	80019d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d019      	beq.n	8001996 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff f954 	bl	8000c14 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff f950 	bl	8000c14 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e15a      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f000 fad8 	bl	8001f44 <RCC_Delay>
 8001994:	e01c      	b.n	80019d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff f93a 	bl	8000c14 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a2:	e00f      	b.n	80019c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff f936 	bl	8000c14 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d908      	bls.n	80019c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e140      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	42420000 	.word	0x42420000
 80019c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e9      	bne.n	80019a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80a6 	beq.w	8001b2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10d      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a93      	ldr	r2, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b91      	ldr	r3, [pc, #580]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a16:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a8a      	ldr	r2, [pc, #552]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7ff f8f7 	bl	8000c14 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7ff f8f3 	bl	8000c14 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0fd      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x312>
 8001a50:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e02d      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a72      	ldr	r2, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	e01c      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x356>
 8001a88:	4b6d      	ldr	r3, [pc, #436]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a6c      	ldr	r2, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a69      	ldr	r2, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6213      	str	r3, [r2, #32]
 8001aa0:	e00b      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a66      	ldr	r2, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a63      	ldr	r2, [pc, #396]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f8a7 	bl	8000c14 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff f8a3 	bl	8000c14 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0ab      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ee      	beq.n	8001aca <HAL_RCC_OscConfig+0x37e>
 8001aec:	e014      	b.n	8001b18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff f891 	bl	8000c14 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff f88d 	bl	8000c14 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e095      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1e:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a47      	ldr	r2, [pc, #284]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8081 	beq.w	8001c36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b34:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d061      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d146      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f861 	bl	8000c14 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f85d 	bl	8000c14 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e067      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	492d      	ldr	r1, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a19      	ldr	r1, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7ff f831 	bl	8000c14 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff f82d 	bl	8000c14 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e037      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x46a>
 8001bd4:	e02f      	b.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_RCC_OscConfig+0x4fc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f81a 	bl	8000c14 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f816 	bl	8000c14 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e020      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x498>
 8001c02:	e018      	b.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e013      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	42420060 	.word	0x42420060

08001c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0d0      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d910      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4965      	ldr	r1, [pc, #404]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0b8      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	494d      	ldr	r1, [pc, #308]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d040      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d115      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e073      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e06b      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4936      	ldr	r1, [pc, #216]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7fe ff6a 	bl	8000c14 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7fe ff66 	bl	8000c14 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e053      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d210      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4922      	ldr	r1, [pc, #136]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e032      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4916      	ldr	r1, [pc, #88]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dda:	f000 f821 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	490a      	ldr	r1, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	5ccb      	ldrb	r3, [r1, r3]
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1cc>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1d0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fec8 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	080034c0 	.word	0x080034c0
 8001e18:	20000010 	.word	0x20000010
 8001e1c:	20000020 	.word	0x20000020

08001e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b490      	push	{r4, r7}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e28:	1d3c      	adds	r4, r7, #4
 8001e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e30:	f240 2301 	movw	r3, #513	; 0x201
 8001e34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x40>
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x46>
 8001e5e:	e02d      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e62:	623b      	str	r3, [r7, #32]
      break;
 8001e64:	e02d      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	0c9b      	lsrs	r3, r3, #18
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e72:	4413      	add	r3, r2
 8001e74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c5b      	lsrs	r3, r3, #17
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e92:	4413      	add	r3, r2
 8001e94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9e:	fb02 f203 	mul.w	r2, r2, r3
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	e004      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	623b      	str	r3, [r7, #32]
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebe:	623b      	str	r3, [r7, #32]
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc90      	pop	{r4, r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	080034b0 	.word	0x080034b0
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	003d0900 	.word	0x003d0900

08001ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	20000010 	.word	0x20000010

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef8:	f7ff fff2 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	080034d0 	.word	0x080034d0

08001f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f20:	f7ff ffde 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0adb      	lsrs	r3, r3, #11
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4903      	ldr	r1, [pc, #12]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	080034d0 	.word	0x080034d0

08001f44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <RCC_Delay+0x34>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <RCC_Delay+0x38>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f60:	bf00      	nop
  }
  while (Delay --);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	60fa      	str	r2, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f9      	bne.n	8001f60 <RCC_Delay+0x1c>
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	10624dd3 	.word	0x10624dd3

08001f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d07d      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa0:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a4b      	ldr	r2, [pc, #300]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	61d3      	str	r3, [r2, #28]
 8001fb8:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d118      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a42      	ldr	r2, [pc, #264]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe0:	f7fe fe18 	bl	8000c14 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	e008      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7fe fe14 	bl	8000c14 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e06d      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002006:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d02e      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d027      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002024:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002034:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800203a:	4a29      	ldr	r2, [pc, #164]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d014      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe fde3 	bl	8000c14 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fddf 	bl	8000c14 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e036      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ee      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4917      	ldr	r1, [pc, #92]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	4313      	orrs	r3, r2
 8002084:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002096:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	490b      	ldr	r1, [pc, #44]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	4904      	ldr	r1, [pc, #16]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42420440 	.word	0x42420440

080020ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e041      	b.n	8002182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fb26 	bl	8000764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3304      	adds	r3, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f000 fa6a 	bl	8002604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d001      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e035      	b.n	8002210 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a16      	ldr	r2, [pc, #88]	; (800221c <HAL_TIM_Base_Start_IT+0x90>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_TIM_Base_Start_IT+0x4e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d004      	beq.n	80021da <HAL_TIM_Base_Start_IT+0x4e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_TIM_Base_Start_IT+0x94>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d111      	bne.n	80021fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d010      	beq.n	800220e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021fc:	e007      	b.n	800220e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40000400 	.word	0x40000400

08002224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d122      	bne.n	8002280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	d11b      	bne.n	8002280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0202 	mvn.w	r2, #2
 8002250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f9b1 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f9a4 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f9b3 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0204 	mvn.w	r2, #4
 80022a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f987 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f97a 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f989 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0208 	mvn.w	r2, #8
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2204      	movs	r2, #4
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f95d 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f950 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f95f 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b10      	cmp	r3, #16
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b10      	cmp	r3, #16
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0210 	mvn.w	r2, #16
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2208      	movs	r2, #8
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f933 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f926 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f935 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0201 	mvn.w	r2, #1
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fd ff7c 	bl	80002a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa67 	bl	80028a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	d10e      	bne.n	8002400 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d107      	bne.n	8002400 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8f9 	bl	80025f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b20      	cmp	r3, #32
 800240c:	d10e      	bne.n	800242c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b20      	cmp	r3, #32
 800241a:	d107      	bne.n	800242c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0220 	mvn.w	r2, #32
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa32 	bl	8002890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIM_ConfigClockSource+0x18>
 8002448:	2302      	movs	r3, #2
 800244a:	e0b3      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x180>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800246a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002472:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002484:	d03e      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0xd0>
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248a:	f200 8087 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x168>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	f000 8085 	beq.w	80025a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	d87f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 800249c:	2b70      	cmp	r3, #112	; 0x70
 800249e:	d01a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xa2>
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d87b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024a4:	2b60      	cmp	r3, #96	; 0x60
 80024a6:	d050      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x116>
 80024a8:	2b60      	cmp	r3, #96	; 0x60
 80024aa:	d877      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024ac:	2b50      	cmp	r3, #80	; 0x50
 80024ae:	d03c      	beq.n	800252a <HAL_TIM_ConfigClockSource+0xf6>
 80024b0:	2b50      	cmp	r3, #80	; 0x50
 80024b2:	d873      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d058      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x136>
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d86f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024bc:	2b30      	cmp	r3, #48	; 0x30
 80024be:	d064      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x156>
 80024c0:	2b30      	cmp	r3, #48	; 0x30
 80024c2:	d86b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d060      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x156>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d867      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05c      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x156>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d05a      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024d4:	e062      	b.n	800259c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f000 f95c 	bl	80027a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	609a      	str	r2, [r3, #8]
      break;
 8002502:	e04e      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f000 f945 	bl	80027a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002526:	609a      	str	r2, [r3, #8]
      break;
 8002528:	e03b      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	f000 f8bc 	bl	80026b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2150      	movs	r1, #80	; 0x50
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f913 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002548:	e02b      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f8da 	bl	8002710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2160      	movs	r1, #96	; 0x60
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f903 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002568:	e01b      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f89c 	bl	80026b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f8f3 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002588:	e00b      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 f8ea 	bl	800276e <TIM_ITRx_SetConfig>
        break;
 800259a:	e002      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a25      	ldr	r2, [pc, #148]	; (80026ac <TIM_Base_SetConfig+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <TIM_Base_SetConfig+0x28>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002622:	d003      	beq.n	800262c <TIM_Base_SetConfig+0x28>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <TIM_Base_SetConfig+0xac>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d108      	bne.n	800263e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <TIM_Base_SetConfig+0xa8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <TIM_Base_SetConfig+0x52>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264c:	d003      	beq.n	8002656 <TIM_Base_SetConfig+0x52>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <TIM_Base_SetConfig+0xac>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d108      	bne.n	8002668 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <TIM_Base_SetConfig+0xa8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	615a      	str	r2, [r3, #20]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40000400 	.word	0x40000400

080026b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f023 0201 	bic.w	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f023 030a 	bic.w	r3, r3, #10
 80026f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f023 0210 	bic.w	r2, r3, #16
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800273a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	031b      	lsls	r3, r3, #12
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800274c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	621a      	str	r2, [r3, #32]
}
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	f043 0307 	orr.w	r3, r3, #7
 8002790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	021a      	lsls	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e041      	b.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d004      	beq.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10c      	bne.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4313      	orrs	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40000400 	.word	0x40000400

08002890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e03f      	b.n	8002946 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fd ff66 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fc85 	bl	8003208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800290c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800291c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800292c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b08a      	sub	sp, #40	; 0x28
 8002952:	af02      	add	r7, sp, #8
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	d17c      	bne.n	8002a68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_UART_Transmit+0x2c>
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e075      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_UART_Transmit+0x3e>
 8002988:	2302      	movs	r3, #2
 800298a:	e06e      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2221      	movs	r2, #33	; 0x21
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a2:	f7fe f937 	bl	8000c14 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029bc:	d108      	bne.n	80029d0 <HAL_UART_Transmit+0x82>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e003      	b.n	80029d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029e0:	e02a      	b.n	8002a38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fa38 	bl	8002e62 <UART_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e036      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	3302      	adds	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	e007      	b.n	8002a2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3301      	adds	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1cf      	bne.n	80029e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fa08 	bl	8002e62 <UART_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e006      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d11d      	bne.n	8002ac8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_UART_Receive_IT+0x26>
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e016      	b.n	8002aca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Receive_IT+0x38>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e00f      	b.n	8002aca <HAL_UART_Receive_IT+0x58>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fa19 	bl	8002ef6 <UART_Start_Receive_IT>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	e000      	b.n	8002aca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ac8:	2302      	movs	r3, #2
  }
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10d      	bne.n	8002b26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_UART_IRQHandler+0x52>
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fac9 	bl	80030b6 <UART_Receive_IT>
      return;
 8002b24:	e17b      	b.n	8002e1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80b1 	beq.w	8002c90 <HAL_UART_IRQHandler+0x1bc>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_UART_IRQHandler+0x70>
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80a6 	beq.w	8002c90 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_UART_IRQHandler+0x90>
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_UART_IRQHandler+0xb0>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0202 	orr.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_UART_IRQHandler+0xd0>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00f      	beq.n	8002bce <HAL_UART_IRQHandler+0xfa>
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <HAL_UART_IRQHandler+0xee>
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f043 0208 	orr.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 811e 	beq.w	8002e14 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x11e>
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fa62 	bl	80030b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <HAL_UART_IRQHandler+0x146>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d031      	beq.n	8002c7e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9a4 	bl	8002f68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d023      	beq.n	8002c76 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	4a76      	ldr	r2, [pc, #472]	; (8002e24 <HAL_UART_IRQHandler+0x350>)
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fb72 	bl	800133c <HAL_DMA_Abort_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e00e      	b.n	8002c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f8e3 	bl	8002e3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e00a      	b.n	8002c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8df 	bl	8002e3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	e006      	b.n	8002c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f8db 	bl	8002e3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c8a:	e0c3      	b.n	8002e14 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	bf00      	nop
    return;
 8002c8e:	e0c1      	b.n	8002e14 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f040 80a1 	bne.w	8002ddc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 809b 	beq.w	8002ddc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8095 	beq.w	8002ddc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04e      	beq.n	8002d74 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002ce0:	8a3b      	ldrh	r3, [r7, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8098 	beq.w	8002e18 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cec:	8a3a      	ldrh	r2, [r7, #16]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	f080 8092 	bcs.w	8002e18 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8a3a      	ldrh	r2, [r7, #16]
 8002cf8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d02b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d12:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d32:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0210 	bic.w	r2, r2, #16
 8002d50:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fab5 	bl	80012c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f86d 	bl	8002e4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d72:	e051      	b.n	8002e18 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d047      	beq.n	8002e1c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d8c:	8a7b      	ldrh	r3, [r7, #18]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d044      	beq.n	8002e1c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002da0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0210 	bic.w	r2, r2, #16
 8002dce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dd0:	8a7b      	ldrh	r3, [r7, #18]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f839 	bl	8002e4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dda:	e01f      	b.n	8002e1c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_UART_IRQHandler+0x324>
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f8f9 	bl	8002fe8 <UART_Transmit_IT>
    return;
 8002df6:	e012      	b.n	8002e1e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <HAL_UART_IRQHandler+0x34a>
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f93a 	bl	8003086 <UART_EndTransmit_IT>
    return;
 8002e12:	e004      	b.n	8002e1e <HAL_UART_IRQHandler+0x34a>
    return;
 8002e14:	bf00      	nop
 8002e16:	e002      	b.n	8002e1e <HAL_UART_IRQHandler+0x34a>
      return;
 8002e18:	bf00      	nop
 8002e1a:	e000      	b.n	8002e1e <HAL_UART_IRQHandler+0x34a>
      return;
 8002e1c:	bf00      	nop
  }
}
 8002e1e:	3728      	adds	r7, #40	; 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	08002fc1 	.word	0x08002fc1

08002e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e72:	e02c      	b.n	8002ece <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d028      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e82:	f7fd fec7 	bl	8000c14 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d21d      	bcs.n	8002ece <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ea0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00f      	b.n	8002eee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d0c3      	beq.n	8002e74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	4613      	mov	r3, r2
 8002f02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2222      	movs	r2, #34	; 0x22
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0220 	orr.w	r2, r2, #32
 8002f5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0210 	bic.w	r2, r2, #16
 8002fa6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff ff2d 	bl	8002e3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b21      	cmp	r3, #33	; 0x21
 8002ffa:	d13e      	bne.n	800307a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003004:	d114      	bne.n	8003030 <UART_Transmit_IT+0x48>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d110      	bne.n	8003030 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	1c9a      	adds	r2, r3, #2
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	621a      	str	r2, [r3, #32]
 800302e:	e008      	b.n	8003042 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	1c59      	adds	r1, r3, #1
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6211      	str	r1, [r2, #32]
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29b      	uxth	r3, r3
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	4619      	mov	r1, r3
 8003050:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff febe 	bl	8002e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b22      	cmp	r3, #34	; 0x22
 80030c8:	f040 8099 	bne.w	80031fe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d117      	bne.n	8003106 <UART_Receive_IT+0x50>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d113      	bne.n	8003106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	1c9a      	adds	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
 8003104:	e026      	b.n	8003154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003118:	d007      	beq.n	800312a <UART_Receive_IT+0x74>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <UART_Receive_IT+0x82>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e008      	b.n	800314a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003144:	b2da      	uxtb	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29b      	uxth	r3, r3
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4619      	mov	r1, r3
 8003162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003164:	2b00      	cmp	r3, #0
 8003166:	d148      	bne.n	80031fa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0220 	bic.w	r2, r2, #32
 8003176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d123      	bne.n	80031f0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0210 	bic.w	r2, r2, #16
 80031bc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d10a      	bne.n	80031e2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fe2f 	bl	8002e4c <HAL_UARTEx_RxEventCallback>
 80031ee:	e002      	b.n	80031f6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7fd f865 	bl	80002c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e002      	b.n	8003200 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e000      	b.n	8003200 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
  }
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003242:	f023 030c 	bic.w	r3, r3, #12
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	430b      	orrs	r3, r1
 800324e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2c      	ldr	r2, [pc, #176]	; (800331c <UART_SetConfig+0x114>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003270:	f7fe fe54 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	e002      	b.n	800327e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7fe fe3c 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 800327c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <UART_SetConfig+0x118>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	0119      	lsls	r1, r3, #4
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <UART_SetConfig+0x118>)
 80032b6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2064      	movs	r0, #100	; 0x64
 80032be:	fb00 f303 	mul.w	r3, r0, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	3332      	adds	r3, #50	; 0x32
 80032c8:	4a15      	ldr	r2, [pc, #84]	; (8003320 <UART_SetConfig+0x118>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d4:	4419      	add	r1, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <UART_SetConfig+0x118>)
 80032ee:	fba3 0302 	umull	r0, r3, r3, r2
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2064      	movs	r0, #100	; 0x64
 80032f6:	fb00 f303 	mul.w	r3, r0, r3
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	3332      	adds	r3, #50	; 0x32
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <UART_SetConfig+0x118>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	440a      	add	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40013800 	.word	0x40013800
 8003320:	51eb851f 	.word	0x51eb851f

08003324 <__libc_init_array>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	2600      	movs	r6, #0
 8003328:	4d0c      	ldr	r5, [pc, #48]	; (800335c <__libc_init_array+0x38>)
 800332a:	4c0d      	ldr	r4, [pc, #52]	; (8003360 <__libc_init_array+0x3c>)
 800332c:	1b64      	subs	r4, r4, r5
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	42a6      	cmp	r6, r4
 8003332:	d109      	bne.n	8003348 <__libc_init_array+0x24>
 8003334:	f000 f87e 	bl	8003434 <_init>
 8003338:	2600      	movs	r6, #0
 800333a:	4d0a      	ldr	r5, [pc, #40]	; (8003364 <__libc_init_array+0x40>)
 800333c:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <__libc_init_array+0x44>)
 800333e:	1b64      	subs	r4, r4, r5
 8003340:	10a4      	asrs	r4, r4, #2
 8003342:	42a6      	cmp	r6, r4
 8003344:	d105      	bne.n	8003352 <__libc_init_array+0x2e>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	f855 3b04 	ldr.w	r3, [r5], #4
 800334c:	4798      	blx	r3
 800334e:	3601      	adds	r6, #1
 8003350:	e7ee      	b.n	8003330 <__libc_init_array+0xc>
 8003352:	f855 3b04 	ldr.w	r3, [r5], #4
 8003356:	4798      	blx	r3
 8003358:	3601      	adds	r6, #1
 800335a:	e7f2      	b.n	8003342 <__libc_init_array+0x1e>
 800335c:	08003500 	.word	0x08003500
 8003360:	08003500 	.word	0x08003500
 8003364:	08003500 	.word	0x08003500
 8003368:	08003504 	.word	0x08003504

0800336c <__itoa>:
 800336c:	1e93      	subs	r3, r2, #2
 800336e:	2b22      	cmp	r3, #34	; 0x22
 8003370:	b510      	push	{r4, lr}
 8003372:	460c      	mov	r4, r1
 8003374:	d904      	bls.n	8003380 <__itoa+0x14>
 8003376:	2300      	movs	r3, #0
 8003378:	461c      	mov	r4, r3
 800337a:	700b      	strb	r3, [r1, #0]
 800337c:	4620      	mov	r0, r4
 800337e:	bd10      	pop	{r4, pc}
 8003380:	2a0a      	cmp	r2, #10
 8003382:	d109      	bne.n	8003398 <__itoa+0x2c>
 8003384:	2800      	cmp	r0, #0
 8003386:	da07      	bge.n	8003398 <__itoa+0x2c>
 8003388:	232d      	movs	r3, #45	; 0x2d
 800338a:	700b      	strb	r3, [r1, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	4240      	negs	r0, r0
 8003390:	4421      	add	r1, r4
 8003392:	f000 f80d 	bl	80033b0 <__utoa>
 8003396:	e7f1      	b.n	800337c <__itoa+0x10>
 8003398:	2100      	movs	r1, #0
 800339a:	e7f9      	b.n	8003390 <__itoa+0x24>

0800339c <itoa>:
 800339c:	f7ff bfe6 	b.w	800336c <__itoa>

080033a0 <memset>:
 80033a0:	4603      	mov	r3, r0
 80033a2:	4402      	add	r2, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <__utoa>:
 80033b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b2:	b08b      	sub	sp, #44	; 0x2c
 80033b4:	4605      	mov	r5, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	466e      	mov	r6, sp
 80033ba:	4c1d      	ldr	r4, [pc, #116]	; (8003430 <__utoa+0x80>)
 80033bc:	f104 0c20 	add.w	ip, r4, #32
 80033c0:	4637      	mov	r7, r6
 80033c2:	6820      	ldr	r0, [r4, #0]
 80033c4:	6861      	ldr	r1, [r4, #4]
 80033c6:	3408      	adds	r4, #8
 80033c8:	c703      	stmia	r7!, {r0, r1}
 80033ca:	4564      	cmp	r4, ip
 80033cc:	463e      	mov	r6, r7
 80033ce:	d1f7      	bne.n	80033c0 <__utoa+0x10>
 80033d0:	7921      	ldrb	r1, [r4, #4]
 80033d2:	6820      	ldr	r0, [r4, #0]
 80033d4:	7139      	strb	r1, [r7, #4]
 80033d6:	1e91      	subs	r1, r2, #2
 80033d8:	2922      	cmp	r1, #34	; 0x22
 80033da:	6038      	str	r0, [r7, #0]
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	d904      	bls.n	80033ec <__utoa+0x3c>
 80033e2:	7019      	strb	r1, [r3, #0]
 80033e4:	460b      	mov	r3, r1
 80033e6:	4618      	mov	r0, r3
 80033e8:	b00b      	add	sp, #44	; 0x2c
 80033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ec:	1e58      	subs	r0, r3, #1
 80033ee:	4684      	mov	ip, r0
 80033f0:	fbb5 f7f2 	udiv	r7, r5, r2
 80033f4:	fb02 5617 	mls	r6, r2, r7, r5
 80033f8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80033fc:	4476      	add	r6, lr
 80033fe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003402:	460c      	mov	r4, r1
 8003404:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003408:	462e      	mov	r6, r5
 800340a:	42b2      	cmp	r2, r6
 800340c:	463d      	mov	r5, r7
 800340e:	f101 0101 	add.w	r1, r1, #1
 8003412:	d9ed      	bls.n	80033f0 <__utoa+0x40>
 8003414:	2200      	movs	r2, #0
 8003416:	545a      	strb	r2, [r3, r1]
 8003418:	1919      	adds	r1, r3, r4
 800341a:	1aa5      	subs	r5, r4, r2
 800341c:	42aa      	cmp	r2, r5
 800341e:	dae2      	bge.n	80033e6 <__utoa+0x36>
 8003420:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003424:	780e      	ldrb	r6, [r1, #0]
 8003426:	3201      	adds	r2, #1
 8003428:	7006      	strb	r6, [r0, #0]
 800342a:	f801 5901 	strb.w	r5, [r1], #-1
 800342e:	e7f4      	b.n	800341a <__utoa+0x6a>
 8003430:	080034d8 	.word	0x080034d8

08003434 <_init>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr

08003440 <_fini>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr
